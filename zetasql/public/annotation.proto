//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// LINT: LEGACY_NAMES
syntax = "proto2";

package zetasql;

option cc_enable_arenas = true;
option java_package = "com.google.zetasql";
option java_outer_classname = "ZetaSQLAnnotation";

// Map entry from AnnotationSpec ID to AnnotationValue.
message AnnotationProto {
  // Key for the map entry.
  optional int64 id = 1;

  // Value of map entry. Exact one of the value should present.
  oneof value {
    int64 int64_value = 2;    // Set when AnnotationValue::type_ is TYPE_INT64.
    string string_value = 3;  // Set when AnnotationValue::type_ is TYPE_STRING.

    // User code that switches on this oneof enum must have a default case so
    // builds won't break when new fields are added.
    bool __AnnotationProto__switch_must_have_a_default = 255;
  }
}

// This represents the serialized form of the annotation map for
// zetasql::AnnotatedType.
message AnnotationMapProto {
  repeated AnnotationProto annotations = 1;
  // If AnnotatedType is a complex type, then one (and only one) of these
  // will be populated.
  optional AnnotationMapProto array_element = 2;
  repeated AnnotationMapProto struct_fields = 3;
}
